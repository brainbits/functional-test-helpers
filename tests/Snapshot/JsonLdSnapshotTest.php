<?php

declare(strict_types=1);

namespace Brainbits\FunctionalTestHelpers\Tests\Snapshot;

use Brainbits\FunctionalTestHelpers\Snapshot\SnapshotTrait;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\ExpectationFailedException;
use PHPUnit\Framework\TestCase;

use function Safe\file_get_contents;
use function Safe\file_put_contents;

/**
 * @covers \Brainbits\FunctionalTestHelpers\Snapshot\SnapshotTrait
 */
final class JsonLdSnapshotTest extends TestCase
{
    use SnapshotTrait;

    private vfsStreamDirectory $snapshotsDir;

    public function setUp(): void
    {
        $root = vfsStream::setup('root', null, ['__snapshots__' => []]);

        $this->snapshotsDir = $root->getChild('__snapshots__');
    }

    public function testInvalidJson(): void
    {
        $data = 'test';

        try {
            $this->assertMatchesJsonLdSnapshot($data);
        } catch (ExpectationFailedException $e) {
            return;
        }

        $this->fail('Assertion did not fail');
    }

    public function testJsonLd(): void
    {
        $data = '{"a":1,"b":[1,2,3],"c":{"foo":"bar","baz":99}}';

        $this->assertMatchesJsonLdSnapshot($data);
        $this->assertFileExists($this->snapshotsDir->url() . '/json_ld_snapshot_json_ld.json');
    }

    public function testJsonLdWithAutogeneratedIdsAreNormalized(): void
    {
        $data = <<<'JSON'
{
    "@type": "TestModel",
    "@id": "/.well-known/genid/123123",
    "id": 1,
    "name": "test",
    "employee": {
        "@type": "TestEmployeeModel",
        "@id": "/.well-known/genid/234234",
        "id": 1,
        "name": "Foo Bar",
        "username": "fbar"
    },
    "department": {
        "@type": "TestDepartmentModel",
        "@id": "/.well-known/genid/345345",
        "id": 1,
        "name": "Team Foo"
    }
}
JSON;

        $expected = <<<'JSON'
{
    "@type": "TestModel",
    "@id": "snapshot-normalized-id",
    "id": 1,
    "name": "test",
    "employee": {
        "@type": "TestEmployeeModel",
        "@id": "snapshot-normalized-id",
        "id": 1,
        "name": "Foo Bar",
        "username": "fbar"
    },
    "department": {
        "@type": "TestDepartmentModel",
        "@id": "snapshot-normalized-id",
        "id": 1,
        "name": "Team Foo"
    }
}
JSON;

        $this->assertMatchesJsonLdSnapshot($data);
        $filename = $this->snapshotsDir->url() . '/json_ld_snapshot_json_ld_with_autogenerated_ids_are_normalized.json';
        $this->assertFileExists($filename);
        $json = file_get_contents($filename);
        $this->assertJsonStringEqualsJsonString($expected, $json);
    }

    public function testJsonLdAssertionFails(): void
    {
        $data = '{"a":1,"b":[1,2,3],"c":{"foo":"bar","baz":99}}';

        file_put_contents(
            $this->snapshotsDir->url() . '/json_ld_snapshot_json_ld_assertion_fails.json',
            '{}',
        );

        try {
            $this->assertMatchesJsonLdSnapshot($data);
        } catch (ExpectationFailedException $e) {
            return;
        }

        $this->fail('Assertion did not fail');
    }

    public function testNamedJsonLd(): void
    {
        $data = '{"a":1,"b":[1,2,3],"c":{"foo":"bar","baz":99}}';

        $this->assertMatchesNamedJsonLdSnapshot($data, 'postfix');
        $this->assertFileExists($this->snapshotsDir->url() . '/json_ld_snapshot_named_json_ld_postfix.json');
    }

    public function testNamedJsonLdWithAutogeneratedIdsAreNormalized(): void
    {
        $data = <<<'JSON'
{
    "@type": "TestModel",
    "@id": "/.well-known/genid/123123",
    "id": 1,
    "name": "test",
    "employee": {
        "@type": "TestEmployeeModel",
        "@id": "/.well-known/genid/234234",
        "id": 1,
        "name": "Foo Bar",
        "username": "fbar"
    },
    "department": {
        "@type": "TestDepartmentModel",
        "@id": "/.well-known/genid/345345",
        "id": 1,
        "name": "Team Foo"
    }
}
JSON;

        $expected = <<<'JSON'
{
    "@type": "TestModel",
    "@id": "snapshot-normalized-id",
    "id": 1,
    "name": "test",
    "employee": {
        "@type": "TestEmployeeModel",
        "@id": "snapshot-normalized-id",
        "id": 1,
        "name": "Foo Bar",
        "username": "fbar"
    },
    "department": {
        "@type": "TestDepartmentModel",
        "@id": "snapshot-normalized-id",
        "id": 1,
        "name": "Team Foo"
    }
}
JSON;

        $this->assertMatchesNamedJsonLdSnapshot($data, 'postfix');
        // phpcs:ignore Generic.Files.LineLength.TooLong
        $filename = $this->snapshotsDir->url() . '/json_ld_snapshot_named_json_ld_with_autogenerated_ids_are_normalized_postfix.json';
        $this->assertFileExists($filename);
        $json = file_get_contents($filename);
        $this->assertJsonStringEqualsJsonString($expected, $json);
    }

    public function testNamedJsonLdAssertionFails(): void
    {
        $data = '{"a":1,"b":[1,2,3],"c":{"foo":"bar","baz":99}}';

        file_put_contents(
            $this->snapshotsDir->url() . '/json_ld_snapshot_named_json_ld_assertion_fails.json',
            '{}',
        );

        try {
            $this->assertMatchesJsonLdSnapshot($data);
        } catch (ExpectationFailedException $e) {
            return;
        }

        $this->fail('Assertion did not fail');
    }

    /**
     * Overwrite function in using class to locate __snapshot__ directory correctly.
     */
    private function snapshotPath(): string
    {
        return vfsStream::url('root');
    }
}
